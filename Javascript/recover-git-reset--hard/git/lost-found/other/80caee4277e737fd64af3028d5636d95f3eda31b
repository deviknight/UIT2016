import React from 'react';
import { View, Text, Dimensions } from 'react-native';
import { Camera } from 'expo-camera'
import * as Permissions from 'expo-permissions'

import styles from './style';
import Toolbar from './toolbar';

const { width: winWidth, height: winHeight } = Dimensions.get('window');

export default class CameraPage extends React.Component {
    constructor(props){
        super(props)
        this.state = {
            captures: [],
            capturing: null,
            hasCameraPermission: null,
        };
    }

    camera = null;

    setFlashMode = (flashMode) => this.setState({ flashMode });
    setCameraType = (cameraType) => this.setState({ cameraType });
    handleCaptureIn = () => this.setState({ capturing: true });

    handleCaptureOut = () => {
        if (this.state.capturing)
            this.camera.stopRecording();
    };

    handleShortCapture = async () => {
        const photoData = await this.camera.takePictureAsync();
        this.setState({ capturing: false, captures: [photoData, ...this.state.captures] })
    };

    handleLongCapture = async () => {
        const videoData = await this.camera.recordAsync();
        this.setState({ capturing: false, captures: [videoData, ...this.state.captures] });
    };

    async componentDidMount() {
        const camera = await Permissions.askAsync(Permissions.CAMERA);
        const audio = await Permissions.askAsync(Permissions.AUDIO_RECORDING);
        const hasCameraPermission = (camera.status === 'granted' && audio.status === 'granted');

        this.setState({ hasCameraPermission });
    };

    render() {
        const { hasCameraPermission, flashMode, cameraType, capturing, captures } = this.state;

        if (hasCameraPermission === null) {
            return <View />;
        } else if (hasCameraPermission === false) {
            return <Text>Access to camera has been denied.</Text>;
        }

        return (
          <React.Fragment>
            <View>
              <Camera
                type={
                  this.props.isFront
                    ? Camera.Constants.Type.front
                    : Camera.Constants.Type.back
                }
                flashMode={Camera.Constants.FlashMode.off}
                style={styles.preview}
                ref={camera => (this.camera = camera)}
              />
            </View>
            <Text style={styles.cameraText}>Đặt CMND mặt trước vào khung</Text>
            <Toolbar
              capturing={capturing}
              flashMode={flashMode}
              cameraType={cameraType}
              setFlashMode={this.setFlashMode}
              setCameraType={this.setCameraType}
              onCaptureIn={this.handleCaptureIn}
              onCaptureOut={this.handleCaptureOut}
              onLongCapture={this.handleLongCapture}
              onShortCapture={this.handleShortCapture}
            />
          </React.Fragment>
        )
    };
};