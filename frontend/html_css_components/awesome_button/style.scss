// Custom:
$ani-time: 1.5s;
$color-primary: #4f4c58;
$color-secondary: lighten($color-primary, 47%);
$size: 40px;
$btn-shadow: 0 $size*0.6 $size*1.6 rgba(black,.5);
$btn-padding: $size $size*2;
$border-thickness: $size / 15;
$letter-spacing: $border-thickness;

// Common:
body {
    margin: 0;
    padding: 0;
    background: $color-primary;
    font-family: sans-serif;
}

// Button:
a {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
    color: $color-secondary;
    padding: $btn-padding;
    font-size: $size;
    letter-spacing: $letter-spacing;
    text-transform: uppercase;
    text-decoration: none;
    box-shadow: $btn-shadow;
    overflow: hidden;

    // Half Left Part Of Button:
    &:before {
        content: '';
        position: absolute;
        top: $border-thickness;
        left: $border-thickness;
        bottom: $border-thickness;
        width: 50%;
        background: rgba(white, .05);
    }

    // 4 Edges Of Button:
    span {
        $custom-span: (
            1: (from: left, to: right, side: top, width: 100%, height: $border-thickness, animation-delay: 0),
            2: (from: top, to: bottom, side: right, width: $border-thickness, height: 100%, animation-delay: $ani-time / 2),
            3: (from: right, to: left, side: bottom, width: 100%, height: $border-thickness, animation-delay: 0),
            4: (from: bottom, to: top, side: left, width: $border-thickness, height: 100%, animation-delay: $ani-time / 2),
        );
        @function get-cust($nth, $attr) {
            @return map-get(map-get($custom-span, $nth), $attr);
        }
        @mixin child-span($nth) {
            &:nth-child(#{$nth}) {
                position: absolute;
                #{get-cust($nth, side)}: 0;
                #{get-cust($nth, from)}: -100%;
                width: get-cust($nth, width);
                height: get-cust($nth, height);
                background: linear-gradient(to get-cust($nth, to), $color-primary, $color-secondary);
                animation: animate#{$nth} $ani-time linear infinite;
                animation-delay: get-cust($nth, animation-delay);
                @keyframes animate#{$nth} {
                    0% { #{get-cust($nth, from)}: -100%; }
                    100% { #{get-cust($nth, from)}: 100%; }
                }
            }
        }
        @each $nth, $_ in $custom-span {
            @include child-span($nth);
        }

        // @for $i from 1 through length($custom-span) {
        //     @include child-span($i);
        // }

        // @include child-span(1);
        // @include child-span(2);
        // @include child-span(3);
        // @include child-span(4);
    }
}

